{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"vManage API application - Code Guide Description The objective of this code-along exercise is to create an app that connects to vmanage API to perform some basic calls There are 4 main tasks to complete, follow each one of them to develop the app Instructor will indicate when to start each task and will show a quick \"solution\" before moving with the next one To test we will use the following Lab vManage vManage: 10.89.1.134 username: apilover password: Cisco12345! Github repository First step is to clone a github repository that includes the folder and file structure we will follow Our work will be to populate the empty functions within the files with the code needed Use the following command on your terminal to clone the repo to your laptop git clone https://wwwin-github.cisco.com/rgomezbe/vmanage_api_training Visit repository","title":"Home"},{"location":"#vmanage-api-application-code-guide","text":"","title":"vManage API application - Code Guide"},{"location":"#description","text":"The objective of this code-along exercise is to create an app that connects to vmanage API to perform some basic calls There are 4 main tasks to complete, follow each one of them to develop the app Instructor will indicate when to start each task and will show a quick \"solution\" before moving with the next one To test we will use the following Lab vManage vManage: 10.89.1.134 username: apilover password: Cisco12345!","title":"Description"},{"location":"#github-repository","text":"First step is to clone a github repository that includes the folder and file structure we will follow Our work will be to populate the empty functions within the files with the code needed Use the following command on your terminal to clone the repo to your laptop git clone https://wwwin-github.cisco.com/rgomezbe/vmanage_api_training Visit repository","title":"Github repository"},{"location":"final/","text":"CONGRATULATIONS!!! You just developed an application that makes API calls to vManage But there is always room for improvement This means now you have homework: Keep thinking on new functionality to add Use dcloud or devnet sandbox to test your ideas Upload your app to github and share it with the world Sky is the limit! THANKS!!!","title":"Final"},{"location":"final/#congratulations","text":"You just developed an application that makes API calls to vManage But there is always room for improvement This means now you have homework: Keep thinking on new functionality to add Use dcloud or devnet sandbox to test your ideas Upload your app to github and share it with the world Sky is the limit!","title":"CONGRATULATIONS!!!"},{"location":"final/#thanks","text":"","title":"THANKS!!!"},{"location":"task1/","text":"Create sdwan manager class This module is a class to handle the authentication process and perform our app API calls This class will be instantiated on a script file that we will use to execute all our functions Open SDWAN Manager file Browse repository and open the file to work on the sdwan manager class . \u251c\u2500 modules/ \u2514\u2500 sdwan_manager.py Create the init method Define the static parameters needed to connect to vManage server port username password host (Build it by concatenating server + \":\" + port) Create the class methods Lets steal the code we need from postman Open our postman test collection and go to the \"authentication\" request' Click on the code button on the left Choose the python option from the menu and copy the code Paste code under the get_auth_cookie method of the class and modify as needed Do the same for the get_auth_token, send_request and logout methods* Enhance send_request method Our main method is not complete yet, we will need to do additional changes to enable the ability to perform the 4 basic CRUD actions Add the following arguments to the method action resource body Add some exception handling and some friendly printing options to display a readable message in casy of any errors Final changes on init method Since we want authentication to happen natively we are going to add a couple of things to our init method Create a cookie attribbute and assign it the value return from the cookie method Do the same thing for the token Test the class Open the test sdwan manager file on the root of the repository . \u251c\u2500 test_sdwan_class.py Import the class module and initiate an instance of it Provide the basic connection attributes statically Start a session to vmanage Test printing the cookie and token Define an action, resource ('/device/monitor') and an empty body Send an api request Print the response If any issues compare your code to the one on the following links sdwan_manager.py test_sdwan_class.py","title":"Task 1: SD-WAN Manager"},{"location":"task1/#create-sdwan-manager-class","text":"This module is a class to handle the authentication process and perform our app API calls This class will be instantiated on a script file that we will use to execute all our functions","title":"Create sdwan manager class"},{"location":"task1/#open-sdwan-manager-file","text":"Browse repository and open the file to work on the sdwan manager class . \u251c\u2500 modules/ \u2514\u2500 sdwan_manager.py","title":"Open SDWAN Manager file"},{"location":"task1/#create-the-init-method","text":"Define the static parameters needed to connect to vManage server port username password host (Build it by concatenating server + \":\" + port)","title":"Create the init method"},{"location":"task1/#create-the-class-methods","text":"Lets steal the code we need from postman Open our postman test collection and go to the \"authentication\" request' Click on the code button on the left Choose the python option from the menu and copy the code Paste code under the get_auth_cookie method of the class and modify as needed Do the same for the get_auth_token, send_request and logout methods*","title":"Create the class methods"},{"location":"task1/#enhance-send_request-method","text":"Our main method is not complete yet, we will need to do additional changes to enable the ability to perform the 4 basic CRUD actions Add the following arguments to the method action resource body Add some exception handling and some friendly printing options to display a readable message in casy of any errors","title":"Enhance send_request method"},{"location":"task1/#final-changes-on-init-method","text":"Since we want authentication to happen natively we are going to add a couple of things to our init method Create a cookie attribbute and assign it the value return from the cookie method Do the same thing for the token","title":"Final changes on init method"},{"location":"task1/#test-the-class","text":"Open the test sdwan manager file on the root of the repository . \u251c\u2500 test_sdwan_class.py Import the class module and initiate an instance of it Provide the basic connection attributes statically Start a session to vmanage Test printing the cookie and token Define an action, resource ('/device/monitor') and an empty body Send an api request Print the response If any issues compare your code to the one on the following links sdwan_manager.py test_sdwan_class.py","title":"Test the class"},{"location":"task2/","text":"Create support manager module The support manager module includes a set of functions that will assist us executing our calls, this functions are not API related There is a function to load a yaml file, another to load a json file, one to get arguments from the terminal and finally to functions to do some pretty printing Open Support Manager file Browse repository and open the file to work on the support functions . \u251c\u2500 modules/ \u2514\u2500 support_manager.py Create an argument parser The API methods need some parameters to be provided by the user, Use the argparse module to obtain the following arguments from the terminal action resource payload (to be loaded from a json file) Create the config YAML file We will use a YAML config file to provide our script with the required parameters to connect to vmanage Open the config file . \u251c\u2500 config/ \u2514\u2500 config.yaml Create the following key/value pairs VMANAGE: 10.89.1.134 PORT: 443 USERNAME: apilover PASSWORD: Cisco12345! Load YAML file We will now use the yaml module to load the config file and load the values into our code Create the function to acomplish this, since these values are mandatory, please also consider to use inputs and ask the user for the values not present on the file Create a JSON file with a new user Go back to the vmanage API documentation and retrieve a sample call with the users defined at the moment Open the payload file . \u251c\u2500 config/ \u2514\u2500 payload.json Copy the output from vmanage and modify the text to create a new test user group : netadmin description : Python Test User username : test_YOURCEC password : cisco12345 locale : en_US resGroupName : global Load JSON file We will now use the json module to load the payload file and load the values into our code Create the function to acomplish this Create a print dictionary function Create a function to print all keys and values of a dictionary side by side Create a print table function Use tabulate module and create a function to print the data from our GET requests It should use the keys of the json data to create a \"first row\" with the headers of the table Test the support functions Open the test support file on the root of the repository . \u251c\u2500 test_support.py Use the provided sample-data for your testing Import the support module Use the help to display the argument options Use terminal to provide different arguments and print them Load and print the values from a YAML file Load and print the values from a JSON file Use print_formatted function to print a dictionary Use print_tabulate function to print a table from a dictionary If any issues compare your code to the one on the following links support_manager.py test_support.py","title":"Task 2: Support Manager"},{"location":"task2/#create-support-manager-module","text":"The support manager module includes a set of functions that will assist us executing our calls, this functions are not API related There is a function to load a yaml file, another to load a json file, one to get arguments from the terminal and finally to functions to do some pretty printing","title":"Create support manager module"},{"location":"task2/#open-support-manager-file","text":"Browse repository and open the file to work on the support functions . \u251c\u2500 modules/ \u2514\u2500 support_manager.py","title":"Open Support Manager file"},{"location":"task2/#create-an-argument-parser","text":"The API methods need some parameters to be provided by the user, Use the argparse module to obtain the following arguments from the terminal action resource payload (to be loaded from a json file)","title":"Create an argument parser"},{"location":"task2/#create-the-config-yaml-file","text":"We will use a YAML config file to provide our script with the required parameters to connect to vmanage Open the config file . \u251c\u2500 config/ \u2514\u2500 config.yaml Create the following key/value pairs VMANAGE: 10.89.1.134 PORT: 443 USERNAME: apilover PASSWORD: Cisco12345!","title":"Create the config YAML file"},{"location":"task2/#load-yaml-file","text":"We will now use the yaml module to load the config file and load the values into our code Create the function to acomplish this, since these values are mandatory, please also consider to use inputs and ask the user for the values not present on the file","title":"Load YAML file"},{"location":"task2/#create-a-json-file-with-a-new-user","text":"Go back to the vmanage API documentation and retrieve a sample call with the users defined at the moment Open the payload file . \u251c\u2500 config/ \u2514\u2500 payload.json Copy the output from vmanage and modify the text to create a new test user group : netadmin description : Python Test User username : test_YOURCEC password : cisco12345 locale : en_US resGroupName : global","title":"Create a JSON file with a new user"},{"location":"task2/#load-json-file","text":"We will now use the json module to load the payload file and load the values into our code Create the function to acomplish this","title":"Load JSON file"},{"location":"task2/#create-a-print-dictionary-function","text":"Create a function to print all keys and values of a dictionary side by side","title":"Create a print dictionary function"},{"location":"task2/#create-a-print-table-function","text":"Use tabulate module and create a function to print the data from our GET requests It should use the keys of the json data to create a \"first row\" with the headers of the table","title":"Create a print table function"},{"location":"task2/#test-the-support-functions","text":"Open the test support file on the root of the repository . \u251c\u2500 test_support.py Use the provided sample-data for your testing Import the support module Use the help to display the argument options Use terminal to provide different arguments and print them Load and print the values from a YAML file Load and print the values from a JSON file Use print_formatted function to print a dictionary Use print_tabulate function to print a table from a dictionary If any issues compare your code to the one on the following links support_manager.py test_support.py","title":"Test the support functions"},{"location":"task3/","text":"Create Script File Now it is time to create the script file, here we will execute all the class methods and support functions created on the previous tasks Open vManage API file Browse repository and open the vmanage api file . \u251c\u2500 vmanage_api.py Import the modules and functions Import all functions from the support manager file Import the sdwan manager class Load parameters from YAML Use the load_yaml function to get the variables from config file Extract all the parameters to indivudial variables to facilate usage vmanage port user pwd This variables will be used later on the code Load arguments from Terminal Use the get_arguments function to get the paramaters from the terminal Extract all the arguments to individual variables to facilate usage action resource table This arguments will be used later on the code Load request body from JSON Use the load_payload function to get the data from json file and save it in a body variable body Create a new SDWAN manager class instance Use the variables with the connection parameters to instantiate a new sdwan_manager object from the class Send an API request Use the arguments and the send_request method from the class to send an API call Save the response into a variable called data Print API call response on terminal Use the table argument to determine the format and print the data variable on the terminal with one of the print support functions Logout Use the logout method to close the session from vmanage Test the vmanage_api script file Execute the script with the following paramaters python vmanage_api.py -r \"/device/monitor\" If any issues compare your code to the one on the following links vmanage_api.py","title":"Task 3: Script File"},{"location":"task3/#create-script-file","text":"Now it is time to create the script file, here we will execute all the class methods and support functions created on the previous tasks","title":"Create Script File"},{"location":"task3/#open-vmanage-api-file","text":"Browse repository and open the vmanage api file . \u251c\u2500 vmanage_api.py","title":"Open vManage API file"},{"location":"task3/#import-the-modules-and-functions","text":"Import all functions from the support manager file Import the sdwan manager class","title":"Import the modules and functions"},{"location":"task3/#load-parameters-from-yaml","text":"Use the load_yaml function to get the variables from config file Extract all the parameters to indivudial variables to facilate usage vmanage port user pwd This variables will be used later on the code","title":"Load parameters from YAML"},{"location":"task3/#load-arguments-from-terminal","text":"Use the get_arguments function to get the paramaters from the terminal Extract all the arguments to individual variables to facilate usage action resource table This arguments will be used later on the code","title":"Load arguments from Terminal"},{"location":"task3/#load-request-body-from-json","text":"Use the load_payload function to get the data from json file and save it in a body variable body","title":"Load request body from JSON"},{"location":"task3/#create-a-new-sdwan-manager-class-instance","text":"Use the variables with the connection parameters to instantiate a new sdwan_manager object from the class","title":"Create a new SDWAN manager class instance"},{"location":"task3/#send-an-api-request","text":"Use the arguments and the send_request method from the class to send an API call Save the response into a variable called data","title":"Send an API request"},{"location":"task3/#print-api-call-response-on-terminal","text":"Use the table argument to determine the format and print the data variable on the terminal with one of the print support functions","title":"Print API call response on terminal"},{"location":"task3/#logout","text":"Use the logout method to close the session from vmanage","title":"Logout"},{"location":"task3/#test-the-vmanage_api-script-file","text":"Execute the script with the following paramaters python vmanage_api.py -r \"/device/monitor\" If any issues compare your code to the one on the following links vmanage_api.py","title":"Test the vmanage_api script file"},{"location":"task4/","text":"Test the APP (Draft) Final Task is to test all the functionallity of our app To do so we are going to perform all the CRUD actions: Create a new user Read existing users Modify an existing user Delete an existing user","title":"Task 4: Test App"},{"location":"task4/#test-the-app-draft","text":"Final Task is to test all the functionallity of our app To do so we are going to perform all the CRUD actions: Create a new user Read existing users Modify an existing user Delete an existing user","title":"Test the APP (Draft)"}]}